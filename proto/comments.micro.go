// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/comments.proto

/*
Package comments is a generated protocol buffer package.

It is generated from these files:
	proto/comments.proto

It has these top-level messages:
	Comment
	Request
	Response
	SingleRequest
	WriteRequest
*/
package comments

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Comments service

type CommentsClient interface {
	GetAllForVideoId(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetSingle(ctx context.Context, in *SingleRequest, opts ...client.CallOption) (*Comment, error)
	Write(ctx context.Context, in *WriteRequest, opts ...client.CallOption) (*Comment, error)
}

type commentsClient struct {
	c           client.Client
	serviceName string
}

func NewCommentsClient(serviceName string, c client.Client) CommentsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "comments"
	}
	return &commentsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *commentsClient) GetAllForVideoId(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Comments.GetAllForVideoId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetSingle(ctx context.Context, in *SingleRequest, opts ...client.CallOption) (*Comment, error) {
	req := c.c.NewRequest(c.serviceName, "Comments.GetSingle", in)
	out := new(Comment)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) Write(ctx context.Context, in *WriteRequest, opts ...client.CallOption) (*Comment, error) {
	req := c.c.NewRequest(c.serviceName, "Comments.Write", in)
	out := new(Comment)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Comments service

type CommentsHandler interface {
	GetAllForVideoId(context.Context, *Request, *Response) error
	GetSingle(context.Context, *SingleRequest, *Comment) error
	Write(context.Context, *WriteRequest, *Comment) error
}

func RegisterCommentsHandler(s server.Server, hdlr CommentsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Comments{hdlr}, opts...))
}

type Comments struct {
	CommentsHandler
}

func (h *Comments) GetAllForVideoId(ctx context.Context, in *Request, out *Response) error {
	return h.CommentsHandler.GetAllForVideoId(ctx, in, out)
}

func (h *Comments) GetSingle(ctx context.Context, in *SingleRequest, out *Comment) error {
	return h.CommentsHandler.GetSingle(ctx, in, out)
}

func (h *Comments) Write(ctx context.Context, in *WriteRequest, out *Comment) error {
	return h.CommentsHandler.Write(ctx, in, out)
}
